name: 编译基础固件_openwrt

on: 
  repository_dispatch:
  workflow_dispatch:
    inputs:
      resource_directory:
        description: '路由器资源目录'
        default: 'x86_64'
      repo_branch:
        type: choice
        description: '版本分支'
        default: 'v23.05.5'
        options:
          - "v22.03.7"
          - "v24.10.0"
          - "v23.05.5"
      feeds_file:
        type: choice
        description: '替换软件源配置(feeds.conf.default)'
        default: 'false'
        options:
        - "true"
        - "false"
      config_file:
        description: 'config 文件名称(.config)'
        default: '.config'
      befor_patch:
        type: choice
        description: '执行编译前脚本(make_befor.sh)'
        default: 'true'
        options:
        - "true"
        - "false"
      after_patch:
        type: choice
        description: '执行编译后脚本(make_after.sh)'
        default: 'false'
        options:
        - "true"
        - "false"

env:
  TIMEZONE: Asia/Shanghai
  
  UPLOAD_ACTIONSRUNS: true
  
  Resoure_DIR: ${{ github.event.inputs.resource_directory }}
  
  REPO_URL: https://github.com/openwrt/openwrt
  
  REPO_BRANCH: ${{ github.event.inputs.repo_branch }}
  CONFIG_FILE: '${{ github.event.inputs.resource_directory }}/${{ github.event.inputs.config_file }}'
  FEEDS_FILE: '${{ github.event.inputs.resource_directory }}/feeds.conf.default'
  REPLACE_FEEDS: ${{ github.event.inputs.feeds_file }}
  RUN_BEFORPATCH: ${{ github.event.inputs.befor_patch }}
  BEFOR_PATCH: '${{ github.event.inputs.resource_directory }}/make_befor.sh'
  RUN_AFTERPATCH: ${{ github.event.inputs.after_patch }}
  AFTER_PATCH: '${{ github.event.inputs.resource_directory }}/make_after.sh'
  
  
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: 检出仓库数据
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
        #非交互式环境
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TIMEZONE"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: 提取系统信息
      working-directory: /workdir
      run: |
         echo -e "CPU: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo -e "UserName: $(whoami) \n"
         echo -e "SystemInfo: \n$(lsb_release  -a 2>&1 | grep -vi 'No LSB') \n"
         
    - name: 拉取OpenWRT仓库
      working-directory: /workdir
      run: |
        git clone --branch $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    
    - name: 检查文件状态
      id: check
      run: |
        [ -e $FEEDS_FILE ] && echo "feeds=success" >>$GITHUB_OUTPUT
        [ -e $BEFOR_PATCH ] && echo "befor=success" >>$GITHUB_OUTPUT
        [ -e $AFTER_PATCH ] && echo "after=success" >>$GITHUB_OUTPUT
        echo "配置文件路径"
        [ -e $FEEDS_FILE ] && echo $FEEDS_FILE
        [ -e $BEFOR_PATCH ] && echo $BEFOR_PATCH
        [ -e $AFTER_PATCH ] && echo $AFTER_PATCH
    
    - name: 补充需要增加的软件源配置
      if: env.REPLACE_FEEDS == 'true' && steps.check.outputs.feeds == 'success'
      run: |
        [ -e $FEEDS_FILE ] && cat $FEEDS_FILE >> openwrt/feeds.conf.default
        
    - name: 更新并安装软件源
      run: |
        cd openwrt 
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds update -a && ./scripts/feeds install -a
        rm -rf feeds/packages/lang/golang
        git clone https://github.com/sbwml/packages_lang_golang -b 23.x feeds/packages/lang/golang
        
    - name: 加载固件配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cat openwrt/.config
        
    - name: 执行编译前脚本
      if: env.RUN_BEFORPATCH == 'true' && steps.check.outputs.befor == 'success'
      run: |
        chmod +x $BEFOR_PATCH
        cd openwrt
        $GITHUB_WORKSPACE/$BEFOR_PATCH
    
    - name: 下载编译所需
      id: makedownload
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 编译固件
      id: makefirmware
      run: |
        cd openwrt
        echo -e "$(nproc) thread cpu"
        echo "Start Time: "$(date +"%Y/%m/%d %H:%M:%S")""
        make -j$(nproc) || make -j1 || make -j1 V=99
        echo "End Time: "$(date +"%Y/%m/%d %H:%M:%S")""
        echo  "status=success" >>$GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    
    - name: 执行编译后脚本
      if: env.RUN_AFTERPATCH == 'true' && steps.check.outputs.after == 'success'
      run: |
        chmod +x $AFTER_PATCH
        cd openwrt
        $GITHUB_WORKSPACE/$AFTER_PATCH
    
    - name: 整理文件
      id: organize
      if: steps.makefirmware.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        cp ../../../../.config ./build.config
        cp ../../../../feeds.conf.default ./feeds.conf.default
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >>$GITHUB_OUTPUT
        
    - name: 上传固件
      uses: actions/upload-artifact@main
      if: env.UPLOAD_ACTIONSRUNS == 'true' && steps.organize.outputs.status == 'success'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
    
    - name: 清理ActionsRuns旧数据
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 5